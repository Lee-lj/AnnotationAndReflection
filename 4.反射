反射(reflection)

先了解动态语言:是一类可以在运行时改变数据结构的语言，例如新的函数，对象，甚至代码可以在运行时被引进，已有的函数可以被删除或是其他结构上的变化
  简而言之就是在运行时代码可以根据某些条件改变自身结构(PHP,python，C#)
  
  静态语言:与动态语言相对应，运行时不可以改变自身结构的语言，例如Java，C，C++
  Java不是动态语言，但是Java具有一定的动态性，可以利用反射机制获得类似于动态语言的特性。使编程更加灵活。
  
反射(reflection)被视为Java的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部消息，并能直接操作任意对象的内部属性
以及方法

加载完类之后，在堆内存的方法区中就产生了一个class类型的对象(一个类只有一个class对象)，这个对象包含了完整的类的结构信息，可以通过这个对象
看到类的结构，这个对象就像一面镜子，映射出了类的结构，所以将其称之为反射

正常方式的代码:引入需要的“包类”名称->通过new实例化->取得实例化对象
反射:实例化对象->getClass()方法->得到完整的“包类”名称

Java反射机制提供的功能:
1.运行时判断任意一个对象所属的类
2.运行时构造任意一个类的对象
3.运行时判断任意一个类所具有的成员变量和方法
4.运行时获取泛型信息
5.运行时调用任意一个对象的成员变量和方法
6.在运行时处理注解
7.生成动态代理

java反射的优缺点:
优点:可以实现动态创建对象和编译，很大的灵活性
缺点:对性能有一定影响，使用反射基本为解释操作，告诉JVM，我们希望他做什么并且他满足我们的要求。慢于new一个对象

反射的相关API:
java.lang.class:代表一个类
java.lang.reflect.Method:代表类的方法
java.lang.reflect.Field:代表类的成员变量
java.lang.reflect.Constructor:代表类的构造器

在Object类中定义了以下的方法:public final Class getClass() 此方法被所有的子类继承(所有对象都有一个class类，所有的类都继承自class)
这个方法返回值为一个class类，此类是Java反射的源头，反射:可以通过对象的反射求出类的名称等等